#!/usr/bin/env ruby

require "xunlei"
require "commander/import"

require "xunlei/helpers/cli_helper"
include Xunlei::Helper::CLIHelper

program :name, "Xunlei"
program :version, Xunlei::VERSION
program :description, "lixian.vip.xunlei.com utility script"

def execute_dump_action(args, options)
  options.default :driver => "chrome"

  check_for_config_files
  check_for_chromedriver
  credentials = YAML.load_file(xunlei_credential_file_path)
  engine = Xunlei::Engine.new(credentials[:username], credentials[:password], options.driver.downcase.to_sym)

  File.open(xunlei_cookies_path, "w") do |file|
    engine.dump_cookies.each do |line|
      file.write(line)
    end
  end

  yield(engine, args) if block_given?

  engine.stop
end

def do_dump_cookies(c, &block)
  c.option "--driver DRIVER", String, "use a different webdriver (e.g. firefox). default is chrome"
  c.action do |args, options|
    execute_dump_action(args, options, &block)
  end
end

command :dump_tasks do |c|
  c.syntax= "dump_tasks"
  c.description = "dump all files to #{xunlei_tasks_path}"

  do_dump_cookies(c) do |engine, args|
    tasks = engine.dump_tasks

    current_downloaded_tasks = all_downloaded_tasks & tasks.map { |task| task[:name] }
    tasks.reject! { |task| current_downloaded_tasks.include?(task[:name]) }

    File.open(xunlei_tasks_path, "w") do |file|
      file.write(tasks.to_yaml)
    end

    puts "Successfully dumped following tasks:"
    puts
    show_files(tasks)

    puts

    unless current_downloaded_tasks.empty?
      puts "#{current_downloaded_tasks.count} finished downloads: (you should delete them on website)"
      puts
      current_downloaded_tasks.each do |task_name|
        puts task_name
      end
    end
  end
end

command :add do |c|
  c.syntax= "add KEYWORD"
  c.description = "add new task(s)."

  do_dump_cookies(c) do |engine, args|
    engine.add_task(args.first)
  end
end

command :dump_cookies do |c|
  c.syntax = "dump_cookies"
  c.description = "dump cookies to #{xunlei_cookies_path}"

  do_dump_cookies(c)
end

command :download do |c|
  c.syntax = "download"
  c.description = "download all files in #{xunlei_tasks_path}"
  c.option "--only PATTERN", String, "only download files which names include PATTERN"
  c.option "--except PATTERN", String, "do not download files which names include PATTERN"
  c.option "--reverse", "download files in reverse order"
  c.option '--limit NUM', Integer, 'limit the number of files to download'

  c.action do |args, options|
    options.default :only => nil, :except => nil, :limit => 65535

    files = filter_files(YAML.load_file(xunlei_tasks_path), options)

    files.reverse! if options.reverse
    files = files[0, options.limit]

    if files.empty?
      puts "Nothing to do."
    else
      puts "\nAbout to download following files:"
      puts
      show_files(files)

      if agree("\nConfirm? (yes or no)")
        files.each do |file|
          cmd = "wget --load-cookies=#{xunlei_cookies_path} '#{file[:url]}' -c -O \"#{file[:name]}\""
          if system(cmd)
            mark_as_downloaded(file)
          else
            raise "Download failed"
          end
        end
      end
    end
  end
end

command :show do |c|
  c.syntax = "show"
  c.description = "show files in #{xunlei_tasks_path}"

  c.action do |args, options|
    options.default :only => nil, :except => nil
    puts "You have following files in your #{xunlei_tasks_path}:"
    puts
    files = filter_files(YAML.load_file(xunlei_tasks_path), options)
    show_files(files)
  end
end

command :config do |c|
  c.syntax = "config"
  c.description = "open #{xunlei_folder_name} folder"
  c.action do |args, options|
    system("open #{xunlei_folder_name}")
  end
end

command :add_page do |c|
  c.syntax = "add_page URL"
  c.description = "add all ed2k and magnet links as new tasks on given web page :)"
  c.option "--only PATTERN", String, "only add links which names include PATTERN"
  c.option "--except PATTERN", String, "do not add links which names include PATTERN"
  c.action do |args, options|
    options.default :only => nil, :except => nil
    puts "Adding page '#{args.first}'..."
    puts
    search = Xunlei::Search.new
    links = search.add_page(args.first, options)
    puts
    puts "#{links.count} links found."

    execute_dump_action(args, options) do |engine, args|
      links.each do |link|
        engine.add_task(link)
      end
    end
  end
end

alias_command :down, :download
alias_command :dump, :dump_tasks
